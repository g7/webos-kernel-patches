diff --git a/arch/arm/mach-omap3pe/Kconfig b/arch/arm/mach-omap3pe/Kconfig
index e54b161..ae31dab 100644
--- a/arch/arm/mach-omap3pe/Kconfig
+++ b/arch/arm/mach-omap3pe/Kconfig
@@ -175,7 +175,13 @@ config OMAP3ES2_VDD2_OPP3
 	bool "L3 166Mhz(OPP3)"
 	depends on OMAP3_PM
 	help
-	  Select this option if you want to boot at VDD2 OPP2.
+	  Select this option if you want to boot at VDD2 OPP3.
+
+config OMAP3ES2_VDD2_OPP4
+	bool "L3 200Mhz(OPP4)"
+	depends on OMAP3_PM
+	help
+	  Select this option if you want to boot at VDD2 OPP4.
 
 endchoice
 
diff --git a/arch/arm/mach-omap3pe/clock.h b/arch/arm/mach-omap3pe/clock.h
index 3b7a3db..137be1e 100644
--- a/arch/arm/mach-omap3pe/clock.h
+++ b/arch/arm/mach-omap3pe/clock.h
@@ -42,6 +42,7 @@
 #define S96M	96000000
 #define S83M	83000000
 #define S166M	166000000
+#define S200M	200000000
 
 #define S120M	120000000
 #define S125M	125000000
diff --git a/arch/arm/mach-omap3pe/clock_tree.h b/arch/arm/mach-omap3pe/clock_tree.h
index 5c8ea8d..793d948 100644
--- a/arch/arm/mach-omap3pe/clock_tree.h
+++ b/arch/arm/mach-omap3pe/clock_tree.h
@@ -108,6 +108,8 @@ static struct vdd_prcm_config vdd2_rate_table[MAX_VDD2_OPP +1] = {
 	{S83M, PRCM_VDD2_OPP2, RATE_IN_343X},
 	/*OPP3*/
 	{S166M, PRCM_VDD2_OPP3, RATE_IN_343X},
+	/*OPP4*/
+	{S200M, PRCM_VDD2_OPP4, RATE_IN_343X},
 };
 
 /* Base external input clocks */
diff --git a/arch/arm/mach-omap3pe/constraint.c b/arch/arm/mach-omap3pe/constraint.c
index 7fbd1f9..4b5e577 100644
--- a/arch/arm/mach-omap3pe/constraint.c
+++ b/arch/arm/mach-omap3pe/constraint.c
@@ -69,7 +69,7 @@ static struct atomic_notifier_head freq_dsp_post_notifier_list;
 #define min_vdd1_opp    CO_VDD1_OPP1
 #define max_vdd1_opp    CO_VDD1_OPP7
 #define min_vdd2_opp    CO_VDD2_OPP2
-#define max_vdd2_opp    CO_VDD2_OPP3
+#define max_vdd2_opp    CO_VDD2_OPP4
 
 /******************************************************************************
  *
diff --git a/arch/arm/mach-omap3pe/prcm_opp.c b/arch/arm/mach-omap3pe/prcm_opp.c
index c43234a..1d2bc6c 100644
--- a/arch/arm/mach-omap3pe/prcm_opp.c
+++ b/arch/arm/mach-omap3pe/prcm_opp.c
@@ -60,12 +60,12 @@ static u8 mpu_iva2_vdd1_volts [PRCM_NO_VDD1_OPPS] = {
 		0x1E, 0x24, 0x30, 0x3C, 0x41, 0x42, 0x45
 };
 
-static u8 core_l3_vdd2_volts [PRCM_NO_VDD2_OPPS] = { /* only 3 OPPs */
-	/* Vsel corresponding to 0.975V (OPP1), 1.05V (OPP2), 1.15 (OPP3) */
-	0x1e, 0x24, 0x2c
+static u8 core_l3_vdd2_volts [PRCM_NO_VDD2_OPPS] = { /* only 4 OPPs */
+	/* Vsel corresponding to 0.975V (OPP1), 1.05V (OPP2), 1.15 (OPP3), 1.15 (OPP4) */
+	0x1e, 0x24, 0x26, 0x26
 };
 
-static struct dvfs_config omap3_vdd2_config[2] = {
+static struct dvfs_config omap3_vdd2_config[3] = {
 	{
 	/* SDRC CS0/CS1 values 83MHZ*/
 	{{0x00025801, 0x629db4c6, 0x00012214},
@@ -91,6 +91,17 @@ static struct dvfs_config omap3_vdd2_config[2] = {
 	 {0x000F0F01, 0x00030301, 0x0F040F04, 0x010F1010, 0x1F060000},
 	 {0x001F1F01, 0x00080803, 0x1D091D09, 0x041D1F1F, 0x1D0904C4} }
 	},
+
+	/* SDRC CS0/CS1 values 200MHZ*/
+	{
+	{{0x00061A81, 0x629db4c6, 0x00012214},
+	 {0x00061A81, 0x629db4c6, 0x00012214} },
+	/* GPMC CS0/1/2/3 values 166 MHZ*/
+	{{0x001f1f00, 0x00080802, 0x1C091C09, 0x01131F1F, 0x1F0F03C2},
+	 {0x00141400, 0x00141400, 0x0F010F01, 0x010C1414, 0x1F0F0A80},
+	 {0x000F0F01, 0x00030301, 0x0F040F04, 0x010F1010, 0x1F060000},
+	 {0x001F1F01, 0x00080803, 0x1D091D09, 0x041D1F1F, 0x1D0904C4} }
+	},
 };
 
 static void omap3_configure_gpmc(struct dvfs_config *cfg)
@@ -283,19 +294,19 @@ static struct dpll_param iva_dpll_param[5][PRCM_NO_VDD1_OPPS] = {
 static struct dpll_param core_dpll_param[5][PRCM_NO_VDD2_OPPS] = {
 	/* 12M values */
 	/* OPP1(83 Mhz) and OPP2(166 Mhz) */
-	{{0, 0, 0, 0}, {0x0A6, 0x05, 0x07, 0x02}, {0x0A6, 0x05, 0x07, 0x01} },
+	{{0, 0, 0, 0}, {0x0A6, 0x05, 0x07, 0x02}, {0x0A6, 0x05, 0x07, 0x01}, {0x0A6, 0x05, 0x07, 0x01} },
 	/* 13M values */
 	/* OPP1(83 Mhz) and OPP2(166 Mhz) */
-	{{0, 0, 0, 0}, {0x14C, 0x0C, 0x03, 0x02}, {0x14C, 0x0C, 0x03, 0x01} },
+	{{0, 0, 0, 0}, {0x14C, 0x0C, 0x03, 0x02}, {0x14C, 0x0C, 0x03, 0x01}, {0x190, 0x0C, 0x03, 0x01} },
 	/* 19.2M values */
 	/* OPP1(83 Mhz) and OPP2(166 Mhz) */
-	{{0, 0, 0, 0}, {0x19F, 0x17, 0x03, 0x02}, {0x19F, 0x17, 0x03, 0x01} },
+	{{0, 0, 0, 0}, {0x19F, 0x17, 0x03, 0x02}, {0x19F, 0x17, 0x03, 0x01}, {0x19F, 0x17, 0x03, 0x01} },
 	/* 26M values */
 	/* OPP1(83 Mhz) and OPP2(166 Mhz) */
-	{{0, 0, 0, 0}, {0x0A6, 0x0C, 0x07, 0x02}, {0x0A6, 0x0C, 0x07, 0x01} },
+	{{0, 0, 0, 0}, {0x0A6, 0x0C, 0x07, 0x02}, {0x0A6, 0x0C, 0x07, 0x01}, {0x0A6, 0x0C, 0x07, 0x01} },
 	/* 38.4M values */
 	/* OPP1(83 Mhz) and OPP2(166 Mhz) */
-	{{0, 0, 0, 0}, {0x19F, 0x2F, 0x03, 0x02}, {0x19F, 0x2F, 0x03, 0x01} },
+	{{0, 0, 0, 0}, {0x19F, 0x2F, 0x03, 0x02}, {0x19F, 0x2F, 0x03, 0x01}, {0x19F, 0x2F, 0x03, 0x01} },
 };
 
 static struct dpll_registers dpll_reg[NO_OF_DPLL] = {
@@ -497,8 +508,15 @@ void prcm_scale_finish(void)
 
 	/* Scale back to previous OPP for VDD2*/
 	if (current_vdd2_opp != PRCM_VDD2_OPP2) {
-		prcm_do_voltage_scaling(PRCM_VDD2_OPP3, PRCM_VDD2_OPP2);
-		valid_rate = clk_round_rate(p_vdd2_clk, S166M);
+		prcm_do_voltage_scaling(current_vdd2_opp, PRCM_VDD2_OPP2);
+		switch (current_vdd2_opp) {
+		case PRCM_VDD2_OPP3:
+			valid_rate = clk_round_rate(p_vdd1_clk, S166M);
+			break;
+		case PRCM_VDD2_OPP4:
+			valid_rate = clk_round_rate(p_vdd1_clk, S200M);
+			break;
+		}
 		p_vdd2_clk->set_rate(p_vdd2_clk, valid_rate);
 	}
 
@@ -553,13 +571,14 @@ static struct vdd2_core_freq_d {
 	{0, CO_VDD2_OPP1, PRCM_VDD2_OPP1},
 	{83, CO_VDD2_OPP2, PRCM_VDD2_OPP2},
 	{166, CO_VDD2_OPP3, PRCM_VDD2_OPP3},
+	{200, CO_VDD2_OPP4, PRCM_VDD2_OPP4},
 };
 
 static unsigned int rnd_rate_vdd1[7] = {
 	S125M, S250M, S500M, S600M, S720M, S800M, S1000M
 };
 static unsigned int rnd_rate_vdd2[3] = {
-	0, S83M, S166M
+	0, S83M, S166M, S200M
 };
 
 /* To set the opp for vdd1 */
@@ -715,7 +734,7 @@ static ssize_t omap_pm_vdd1_opp_store(struct kset *subsys,
 	sscanf(buf, "%u", &target_opp_no);
 
 	/* Check target OPP for valid range. */
-	if ((target_opp_no < 1) || (target_opp_no > 5)) {
+	if ((target_opp_no < 1) || (target_opp_no > 7)) {
 		printk(KERN_ERR "opp_store for vdd1 ES 2.0:Invalid value\n");
 		return -EINVAL;
 	}
@@ -771,7 +790,7 @@ static ssize_t omap_pm_vdd2_opp_store(struct kset *subsys,
 	u32 target_opp_no;
 
 	sscanf(buf, "%u", &target_opp_no);
-	if ((target_opp_no < 1) || (target_opp_no > 3)) {
+	if ((target_opp_no < 1) || (target_opp_no > 4)) {
 		printk(KERN_ERR "opp_store for vdd2 ES 2.0:Invalid value\n");
 		return -EINVAL;
 	}
@@ -1437,7 +1456,12 @@ int prcm_do_frequency_scaling(u32 target_opp_id, u32 current_opp_id)
 		tar_m2 = (core_dpll_param[index][target_opp_no - 1].dpll_m2);
 		/* This function is executed from SRAM */
 		local_irq_save(flags);
-		if (target_opp_id == PRCM_VDD2_OPP3) {
+		if (target_opp_id == PRCM_VDD2_OPP4) {
+			omap3_configure_gpmc(&omap3_vdd2_config[2]);
+			rfr_ctrl    = omap3_vdd2_config[2].sdrc_cfg[0].sdrc_rfr_ctrl;
+			actim_ctrla = omap3_vdd2_config[2].sdrc_cfg[0].sdrc_actim_ctrla;
+			actim_ctrlb = omap3_vdd2_config[2].sdrc_cfg[0].sdrc_actim_ctrlb;
+		} else if (target_opp_id == PRCM_VDD2_OPP3) {
 			omap3_configure_gpmc(&omap3_vdd2_config[1]);
 			rfr_ctrl    = omap3_vdd2_config[1].sdrc_cfg[0].sdrc_rfr_ctrl;
 			actim_ctrla = omap3_vdd2_config[1].sdrc_cfg[0].sdrc_actim_ctrla;
@@ -1555,6 +1579,9 @@ int __init prcm_vdd_clk_init(void)
 #elif defined(CONFIG_OMAP3ES2_VDD2_OPP3)
 	current_vdd2_opp = PRCM_VDD2_OPP3;
 	prcm_do_voltage_scaling(PRCM_VDD2_OPP3, PRCM_VDD2_OPP2);
+#elif defined(CONFIG_OMAP3ES2_VDD2_OPP4)
+	current_vdd2_opp = PRCM_VDD2_OPP4;
+	prcm_do_voltage_scaling(PRCM_VDD2_OPP4, PRCM_VDD2_OPP2);
 #endif
 
 #if defined(CONFIG_PM) && defined(CONFIG_SYSFS)
diff --git a/include/asm-arm/arch-omap/prcm.h b/include/asm-arm/arch-omap/prcm.h
index ad67920..6ded95a 100644
--- a/include/asm-arm/arch-omap/prcm.h
+++ b/include/asm-arm/arch-omap/prcm.h
@@ -623,7 +623,9 @@
 							| ID_OPP_NO(0x2))
 #define PRCM_VDD2_OPP3		(OMAP(AT_3430)| OTHER_ID_TYPE(ID_OPP) | ID_VDD(PRCM_VDD2)\
 							| ID_OPP_NO(0x3))
-#define PRCM_NO_VDD2_OPPS	3
+#define PRCM_VDD2_OPP4		(OMAP(AT_3430)| OTHER_ID_TYPE(ID_OPP) | ID_VDD(PRCM_VDD2)\
+							| ID_OPP_NO(0x4))
+#define PRCM_NO_VDD2_OPPS	4
 
 /* OPP and Frequency Constraints */
 #define PRCM_VDD1_CONSTRAINT 	(ID_OMAP(AT_3430) | \
diff --git a/include/asm-arm/arch-omap/resource.h b/include/asm-arm/arch-omap/resource.h
index b8f8ce8..297b181 100644
--- a/include/asm-arm/arch-omap/resource.h
+++ b/include/asm-arm/arch-omap/resource.h
@@ -34,7 +34,7 @@
 #define min_vdd1_opp    CO_VDD1_OPP1
 #define max_vdd1_opp    CO_VDD1_OPP7
 #define min_vdd2_opp    CO_VDD2_OPP2
-#define max_vdd2_opp    CO_VDD2_OPP3
+#define max_vdd2_opp    CO_VDD2_OPP4
 
 #define CURR_VDD1_OPP	3
 #define CURR_VDD2_OPP	3
@@ -128,7 +128,9 @@
 #define CO_VDD2_OPP1		0x1
 #define CO_VDD2_OPP2		0x2
 #define CO_VDD2_OPP3		0x3
-#define CO_MAXLEVEL		0x6
+#define CO_VDD2_OPP4		0x4
+
+#define CO_MAXLEVEL		0x8
 
 /* T2 Power Resources */
 
@@ -282,7 +284,7 @@
 #define MIN_VDD1_OPP 	CO_VDD1_OPP1
 #define MAX_VDD1_OPP 	CO_VDD1_OPP7
 #define MIN_VDD2_OPP 	CO_VDD2_OPP2
-#define MAX_VDD2_OPP 	CO_VDD2_OPP3
+#define MAX_VDD2_OPP 	CO_VDD2_OPP4
 
 /* Structure returned to the framework user as handle */
 struct res_handle {
