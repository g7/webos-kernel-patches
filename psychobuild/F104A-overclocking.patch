--- linux-2.6.24-palm/arch/arm/mach-omap3pe/clock.h	2010-06-11 17:48:34.000000000 -0400
+++ linux-2.6.24.7-F104A/arch/arm/mach-omap3pe/clock.h	2010-08-21 11:01:08.000000000 -0400
@@ -44,12 +44,13 @@
 #define S166M	166000000
 
 #define S120M	120000000
-#define S125M	125000000
 #define S250M	250000000
+#define S400M	400000000
 #define S500M	500000000
-#define S550M	550000000
-#define S625M	625000000
-#define S600M	600000000
+#define S700M	700000000
+#define S800M	800000000
+#define S900M	900000000
+#define S1100M	1100000000
 
 /* Macro to enable clock control via clock framework */
 #define ENABLE_CLOCKCONTROL 1
--- linux-2.6.24-palm/arch/arm/mach-omap3pe/clock_tree.h	2010-06-11 17:48:34.000000000 -0400
+++ linux-2.6.24.7-F104A/arch/arm/mach-omap3pe/clock_tree.h	2010-08-21 10:56:43.000000000 -0400
@@ -84,15 +84,20 @@
 static struct vdd_prcm_config vdd1_rate_table[MAX_VDD1_OPP +1] = {
 	{0, 0, 0},
 	/*OPP1*/
-	{S125M, PRCM_VDD1_OPP1, RATE_IN_343X},
+	{S250M, PRCM_VDD1_OPP1, RATE_IN_343X},
 	/*OPP2*/
-	{S250M, PRCM_VDD1_OPP2, RATE_IN_343X},
+	{S400M, PRCM_VDD1_OPP2, RATE_IN_343X},
 	/*OPP3*/
 	{S500M, PRCM_VDD1_OPP3, RATE_IN_343X},
 	/*OPP4*/
-	{S550M, PRCM_VDD1_OPP4, RATE_IN_343X},
+	{S700M, PRCM_VDD1_OPP4, RATE_IN_343X},
 	/*OPP5*/
-	{S600M, PRCM_VDD1_OPP5, RATE_IN_343X},
+	{S800M, PRCM_VDD1_OPP5, RATE_IN_343X},
+        /*OPP6*/
+        {S900M, PRCM_VDD1_OPP6, RATE_IN_343X},
+        /*OPP7*/
+        {S1100M, PRCM_VDD1_OPP7, RATE_IN_343X},
+
 };
 
 static struct vdd_prcm_config vdd2_rate_table[MAX_VDD2_OPP +1] = {
--- linux-2.6.24-palm/arch/arm/mach-omap3pe/constraint.c	2010-06-11 17:48:34.000000000 -0400
+++ linux-2.6.24.7-F104A/arch/arm/mach-omap3pe/constraint.c	2010-07-06 18:18:31.000000000 -0400
@@ -67,8 +67,8 @@
 static struct atomic_notifier_head freq_dsp_post_notifier_list;
 
 #define min_vdd1_opp    CO_VDD1_OPP1
-#define max_vdd1_opp    CO_VDD1_OPP5
-#define min_vdd2_opp    CO_VDD2_OPP2
+#define max_vdd1_opp    CO_VDD1_OPP7
+#define min_vdd2_opp    CO_VDD2_OPP1
 #define max_vdd2_opp    CO_VDD2_OPP3
 
 /******************************************************************************
--- linux-2.6.24-palm/arch/arm/mach-omap3pe/Kconfig	2010-06-11 17:48:34.000000000 -0400
+++ linux-2.6.24.7-F104A/arch/arm/mach-omap3pe/Kconfig	2010-06-27 20:09:59.000000000 -0400
@@ -132,17 +132,29 @@
 	  Select this option if you want to boot at OPP3.
 
 config OMAP3ES2_VDD1_OPP4
-	bool "MPU-550Mhz/DSP-396Mhz(OPP4)"
+	bool "MPU-700Mhz/DSP-360Mhz(OPP4)"
 	depends on OMAP3_PM
 	help
 	  Select this option if you want to boot at OPP4.
 
 config OMAP3ES2_VDD1_OPP5
-	bool "MPU-625Mhz/DSP-430Mhz(OPP5)"
+	bool "MPU-800Mhz/DSP-360Mhz(OPP5)"
 	depends on OMAP3_PM
 	help
 	  Select this option if you want to boot at OPP5.
 
+config OMAP3ES2_VDD1_OPP6
+        bool "MPU-900Mhz/DSP-360Mhz(OPP6)"
+        depends on OMAP3_PM
+        help
+          Select this option if you want to boot at OPP6.
+
+config OMAP3ES2_VDD1_OPP7
+        bool "MPU-1100Mhz/DSP-360Mhz(OPP7)"
+        depends on OMAP3_PM
+        help
+          Select this option if you want to boot at OPP7.
+
 endchoice
 
 comment "Default VDD2 OPP Level Selection"
--- linux-2.6.24-palm/arch/arm/mach-omap3pe/prcm_opp.c	2010-06-11 17:48:34.000000000 -0400
+++ linux-2.6.24.7-F104A/arch/arm/mach-omap3pe/prcm_opp.c	2010-08-23 21:51:02.000000000 -0400
@@ -55,14 +55,14 @@
 #endif
 
 static u8 mpu_iva2_vdd1_volts [PRCM_NO_VDD1_OPPS] = {
-	/* Vsel corresponding to 0.975V (OPP1), 1.050V (OPP2),
-				1.20V (OPP3), 1.27V (OPP4), 1.35 (OPP5) */
-	0x1e, 0x24, 0x30, 0x36, 0x3C
+	/* Vsel corresponding to 1.05V (OPP1), 1.09V (OPP2),
+  1.112V (OPP3), 1.28V (OPP4), 1.41V (OPP5), 1.49V (OPP6), 1.525V (OPP7) */
+		0x24, 0x27, 0x29, 0x36, 0x41, 0x47, 0x4A
 };
 
 static u8 core_l3_vdd2_volts [PRCM_NO_VDD2_OPPS] = { /* only 3 OPPs */
 	/* Vsel corresponding to 0.975V (OPP1), 1.05V (OPP2), 1.15 (OPP3) */
-	0x1e, 0x24, 0x2c
+	0x1e, 0x24, 0x27
 };
 
 
@@ -155,20 +155,32 @@
 	/* OPP3(500 Mhz) and OPP4(550 Mhz)*/
 	{0x0FA, 0x05, 0x07, 0x01}, {0x113, 0x05, 0x07, 0x01},
 	/* OPP5 (600 Mhz) */
+	{0x12C, 0x05, 0x07, 0x01},
+	/* OPP6 (720 Mhz) */
+	{0x12C, 0x05, 0x07, 0x01},
+	/* OPP7 (800 Mhz) */
 	{0x12C, 0x05, 0x07, 0x01} },
 	/* 13M values */
-	/* OPP1(125 Mhz) and OPP2(250 Mhz)*/
-	{{0x1F4, 0x0C, 0x03, 0x04}, {0x1F4, 0x0C, 0x03, 0x02},
-	/* OPP3(500 Mhz) and OPP4(550 Mhz)*/
-	{0x1F4, 0x0C, 0x03, 0x01}, {0x226, 0x0C, 0x03, 0x01},
-	/* OPP5 (600 Mhz) */
-	{0x258, 0x0C, 0x03, 0x01} },
+	/* OPP1(250 Mhz) and OPP2(400 Mhz)*/
+	{{0x1F4, 0x0C, 0x03, 0x04}, {0x320, 0x0C, 0x03, 0x02},
+	/* OPP3(500 Mhz) and OPP4(700 Mhz)*/
+	{0x1F4, 0x0C, 0x03, 0x01}, {0x2BC, 0x0C, 0x03, 0x01},
+	/* OPP5 (800 Mhz) */
+	{0x320, 0x0C, 0x03, 0x01},
+	/* OPP6 (900 Mhz) */
+	{0x384, 0x0C, 0x03, 0x01},
+	/* OPP7 (1100 Mhz) */
+	{0x44C, 0x0C, 0x03, 0x01} },
 	/* 19.2M values */
 	/* OPP1(125 Mhz) and OPP2(250 Mhz)*/
 	{{0x271, 0x17, 0x03, 0x04}, {0x271, 0x17, 0x03, 0x02},
 	/* OPP3(500 Mhz) and OPP4(550 Mhz)*/
 	{0x271, 0x17, 0x03, 0x01}, {0x191, 0x0D, 0x05, 0x01},
 	/* OPP5 (600 Mhz) */
+	{0x177, 0x0B, 0x06, 0x01},
+	/* OPP6 (720 Mhz) */
+	{0x177, 0x0B, 0x06, 0x01},
+	/* OPP7 (800 Mhz) */
 	{0x177, 0x0B, 0x06, 0x01} },
 	/* 26M values */
 	/* OPP1(125 Mhz) and OPP2(250 Mhz)*/
@@ -176,13 +188,21 @@
 	/* OPP3(500 Mhz) and OPP4(550 Mhz)*/
 	{0x0FA, 0x0C, 0x07, 0x01}, {0x113, 0x0C, 0x07, 0x01},
 	/* OPP5 (600 Mhz) */
-	{0x12C, 0x0C, 0x07, 0x01} },
+	{0x12C, 0x0C, 0x07, 0x01},
+	/* OPP6 (720 Mhz) */
+	{0x168, 0x0C, 0x07, 0x01},
+	/* OPP7 (800 Mhz) */
+	{0x190, 0x0C, 0x07, 0x01} },
 	/* 38.4M values */
 	/* OPP1(125 Mhz) and OPP2(250 Mhz)*/
 	{{0x271, 0x2F, 0x03, 0x04}, {0x271, 0x2F, 0x03, 0x02},
 	/* OPP3(500 Mhz) and OPP4(550 Mhz)*/
 	{0x271, 0x2F, 0x03, 0x01}, {0x1BC, 0x1E, 0x04, 0x01},
 	/* OPP5 (600 Mhz) */
+	{0x177, 0x17, 0x06, 0x01},
+	/* OPP6 (720 Mhz) */
+	{0x177, 0x17, 0x06, 0x01},
+	/* OPP7 (800 Mhz) */
 	{0x177, 0x17, 0x06, 0x01} },
 };
 
@@ -194,7 +214,11 @@
 	/* OPP3(360 Mhz) and OPP4(396 Mhz)*/
 	 {0x0B4, 0x05, 0x07, 0x01}, {0x0C6, 0x05, 0x07, 0x01},
 	/* OPP5 (430 Mhz) */
-	 {0x0D7, 0x05, 0x07, 0x01} },
+	 {0x0D7, 0x05, 0x07, 0x01},
+        /* OPP6 (520 Mhz) */
+        {0x0D7, 0x05, 0x07, 0x01},
+        /* OPP7 (600 Mhz) */
+        {0x0D7, 0x05, 0x07, 0x01} },
 #if 0
 	/* 13M values */
 	/* OPP1(90 Mhz) and OPP2(180 Mhz)*/
@@ -215,6 +239,10 @@
 	/* OPP3(360 Mhz) and OPP4(360 Mhz)*/
 	 {0x168, 0x0C, 0x03, 0x01}, {0x168, 0x0C, 0x03, 0x01},
 	/* OPP5 (360 Mhz) */
+	 {0x168, 0x0C, 0x03, 0x01},
+        /* OPP6 (360 Mhz) */
+	 {0x168, 0x0C, 0x03, 0x01},
+        /* OPP7 (520 Mhz) */
 	 {0x168, 0x0C, 0x03, 0x01} },
 #endif
 	/* 19.2M values */
@@ -223,21 +251,33 @@
 	/* OPP3(360 Mhz) and OPP4(396 Mhz)*/
 	 {0x0E1, 0x0B, 0x06, 0x01}, {0x14A, 0x0F, 0x04, 0x01},
 	/* OPP5 (430 Mhz) */
-	 {0x203, 0x16, 0x03, 0x01} },
+	 {0x203, 0x16, 0x03, 0x01},
+        /* OPP6 (520 Mhz) */
+        {0x203, 0x16, 0x03, 0x01},
+        /* OPP7 (600 Mhz) */
+        {0x203, 0x16, 0x03, 0x01} },
 	/* 26M values */
 	/* OPP1(90 Mhz) and OPP2(180 Mhz)*/
 	{{0x0B4, 0x0C, 0x07, 0x04}, {0x0B4, 0x0C, 0x07, 0x02},
 	/* OPP3(360 Mhz) and OPP4(396 Mhz)*/
 	 {0x0B4, 0x0C, 0x07, 0x01}, {0x0C6, 0x0C, 0x07, 0x01},
 	/* OPP5 (430 Mhz) */
-	 {0x0D7, 0x0C, 0x07, 0x01} },
+	 {0x0D7, 0x0C, 0x07, 0x01},
+        /* OPP6 (520 Mhz) */
+        {0x104, 0x0C, 0x07, 0x01},
+        /* OPP7 (600 Mhz) */
+        {0x12c, 0x0C, 0x07, 0x01} },
 	/* 38.4M values */
 	/* OPP1(90 Mhz) and OPP2(180 Mhz)*/
 	{{0x0E1, 0x17, 0x06, 0x04}, {0x0E1, 0x17, 0x06, 0x02},
 	/* OPP3(360 Mhz) and OPP4(396 Mhz)*/
 	 {0x0E1, 0x17, 0x06, 0x01}, {0x14A, 0x1F, 0x04, 0x01},
 	/* OPP5 (430 Mhz) */
-	 {0x23B, 0x32, 0x01, 0x01} },
+	 {0x23B, 0x32, 0x01, 0x01},
+        /* OPP6 (520 Mhz) */
+        {0x23B, 0x32, 0x03, 0x01},
+        /* OPP7 (600 Mhz) */
+        {0x23B, 0x32, 0x03, 0x01} },
 };
 
 /* CORE parameters */
@@ -440,7 +480,7 @@
 
 	/* Scale to lowest OPP for VDD1 before executing suspend */
 	if (current_vdd1_opp != PRCM_VDD1_OPP1) {
-		valid_rate = clk_round_rate(p_vdd1_clk, S125M);
+		valid_rate = clk_round_rate(p_vdd1_clk, S250M);
 		p_vdd1_clk->set_rate(p_vdd1_clk, valid_rate);
 		prcm_do_voltage_scaling(PRCM_VDD1_OPP1, current_vdd1_opp);
 	}
@@ -467,17 +507,24 @@
 	if (current_vdd1_opp != PRCM_VDD1_OPP1) {
 		switch (current_vdd1_opp) {
 		case PRCM_VDD1_OPP2:
-			valid_rate = clk_round_rate(p_vdd1_clk, S250M);
+			valid_rate = clk_round_rate(p_vdd1_clk, S400M);
 			break;
 		case PRCM_VDD1_OPP3:
 			valid_rate = clk_round_rate(p_vdd1_clk, S500M);
 			break;
 		case PRCM_VDD1_OPP4:
-			valid_rate = clk_round_rate(p_vdd1_clk, S550M);
+			valid_rate = clk_round_rate(p_vdd1_clk, S700M);
 			break;
 		case PRCM_VDD1_OPP5:
-			valid_rate = clk_round_rate(p_vdd1_clk, S600M);
+			valid_rate = clk_round_rate(p_vdd1_clk, S800M);
 			break;
+                case PRCM_VDD1_OPP6:
+                        valid_rate = clk_round_rate(p_vdd1_clk, S900M);
+                        break;
+                case PRCM_VDD1_OPP7:
+                        valid_rate = clk_round_rate(p_vdd1_clk, S1100M);
+                        break;
+
 		}
 		p_vdd1_clk->set_rate(p_vdd1_clk, valid_rate);
 	}
@@ -490,11 +537,14 @@
 	unsigned int constraint;
 	unsigned int opp;
 } vdd1_arm_dsp_freq[MAX_VDD1_OPP] = {
-	{125,  90, CO_VDD1_OPP1, PRCM_VDD1_OPP1},
-	{250, 180, CO_VDD1_OPP2, PRCM_VDD1_OPP2},
+	{250, 180, CO_VDD1_OPP1, PRCM_VDD1_OPP1},
+	{400, 180, CO_VDD1_OPP2, PRCM_VDD1_OPP2},
 	{500, 360, CO_VDD1_OPP3, PRCM_VDD1_OPP3},
-	{550, 396, CO_VDD1_OPP4, PRCM_VDD1_OPP4},
-	{600, 430, CO_VDD1_OPP5, PRCM_VDD1_OPP5},
+	{700, 360, CO_VDD1_OPP4, PRCM_VDD1_OPP4},
+	{800, 360, CO_VDD1_OPP5, PRCM_VDD1_OPP5},
+	{900, 360, CO_VDD1_OPP6, PRCM_VDD1_OPP6},
+	{1100, 360, CO_VDD1_OPP7, PRCM_VDD1_OPP7},
+
 };
 static struct vdd2_core_freq_d {
 	unsigned int freq;
@@ -506,8 +556,8 @@
 	{166, CO_VDD2_OPP3, PRCM_VDD2_OPP3},
 };
 
-static unsigned int rnd_rate_vdd1[5] = {
-	S125M, S250M, S500M, S550M, S600M
+static unsigned int rnd_rate_vdd1[7] = {
+	S250M, S400M, S500M, S700M, S800M, S900M, S1100M
 };
 static unsigned int rnd_rate_vdd2[3] = {
 	0, S83M, S166M
@@ -1449,6 +1499,11 @@
 	target_vdd1_opp = PRCM_VDD1_OPP4;
 #elif defined(CONFIG_OMAP3ES2_VDD1_OPP5)
 	target_vdd1_opp = PRCM_VDD1_OPP5;
+#elif defined(CONFIG_OMAP3ES2_VDD1_OPP6)
+        target_vdd1_opp = PRCM_VDD1_OPP6;
+#elif defined(CONFIG_OMAP3ES2_VDD1_OPP7)
+        target_vdd1_opp = PRCM_VDD1_OPP7;
+
 #endif
         target_mpu_khz  = get_arm_freq_for_opp(get_opp_no(target_vdd1_opp));
 
--- linux-2.6.24-palm/include/asm-arm/arch-omap/prcm.h	2010-06-11 17:48:35.000000000 -0400
+++ linux-2.6.24.7-F104A/include/asm-arm/arch-omap/prcm.h	2010-05-31 12:00:05.000000000 -0400
@@ -609,7 +609,12 @@
 							| ID_OPP_NO(0x4))
 #define PRCM_VDD1_OPP5		(OMAP(AT_3430)| OTHER_ID_TYPE(ID_OPP) | ID_VDD(PRCM_VDD1)\
 							| ID_OPP_NO(0x5))
-#define PRCM_NO_VDD1_OPPS	5
+#define PRCM_VDD1_OPP6          (OMAP(AT_3430)| OTHER_ID_TYPE(ID_OPP) | ID_VDD(PRCM_VDD1)\
+                                                        | ID_OPP_NO(0x6))
+#define PRCM_VDD1_OPP7          (OMAP(AT_3430)| OTHER_ID_TYPE(ID_OPP) | ID_VDD(PRCM_VDD1)\
+                                                        | ID_OPP_NO(0x7))
+
+#define PRCM_NO_VDD1_OPPS	7
 
 /* VDD2 OPPs */
 #define PRCM_VDD2_OPP1		(OMAP(AT_3430)| OTHER_ID_TYPE(ID_OPP) | ID_VDD(PRCM_VDD2)\
--- linux-2.6.24-palm/include/asm-arm/arch-omap/resource.h	2010-06-11 17:48:35.000000000 -0400
+++ linux-2.6.24.7-F104A/include/asm-arm/arch-omap/resource.h	2010-08-25 23:27:57.000000000 -0400
@@ -32,8 +32,8 @@
 #define curr_vdd1_opp   3
 #define curr_vdd2_opp   3
 #define min_vdd1_opp    CO_VDD1_OPP1
-#define max_vdd1_opp    CO_VDD1_OPP5
-#define min_vdd2_opp    CO_VDD2_OPP2
+#define max_vdd1_opp    CO_VDD1_OPP7
+#define min_vdd2_opp    CO_VDD2_OPP1
 #define max_vdd2_opp    CO_VDD2_OPP3
 
 #define CURR_VDD1_OPP	3
@@ -121,6 +121,8 @@
 #define CO_VDD1_OPP3		0x3
 #define CO_VDD1_OPP4		0x4
 #define CO_VDD1_OPP5		0x5
+#define CO_VDD1_OPP6		0x6
+#define CO_VDD1_OPP7		0x7
 
 /* VDD2 OPP constraint levels */
 #define CO_VDD2_OPP1		0x1
@@ -273,13 +275,13 @@
 #define CURR_DSP_FREQ 	360
 #define curr_arm_freq 	500
 #define curr_dsp_freq 	360
-#define min_arm_freq 	125
-#define max_arm_freq 	600
+#define min_arm_freq 	250
+#define max_arm_freq 	1100
 #define min_dsp_freq 	90
-#define max_dsp_freq 	430
+#define max_dsp_freq 	600
 #define MIN_VDD1_OPP 	CO_VDD1_OPP1
-#define MAX_VDD1_OPP 	CO_VDD1_OPP5
-#define MIN_VDD2_OPP 	CO_VDD2_OPP2
+#define MAX_VDD1_OPP 	CO_VDD1_OPP7
+#define MIN_VDD2_OPP 	CO_VDD2_OPP1
 #define MAX_VDD2_OPP 	CO_VDD2_OPP3
 
 /* Structure returned to the framework user as handle */
