--- /home/sbromwich/linux-2.6.24/arch/arm/mach-omap3pe/prcm_pwr.c	2010-05-04 11:19:11.000000000 +0000
+++ linux-2.6.24/arch/arm/mach-omap3pe/prcm_pwr.c	2010-05-10 00:27:35.000000000 +0000
@@ -488,6 +488,7 @@
 
 static void DUMP_REGS_AFTER_WAKEUP(void)
 {
+#ifdef DEBUG_PRCM
 	struct wkup_log_t *log = wkup_log_get_current();
 
 	(void) log; // suppress unused var 
@@ -528,6 +529,7 @@
 	printd("##### autoidle1_core was %08x\n",   log->autoidle1_core);
 	printd("##### autoidle2_core was %08x\n",   log->autoidle2_core);
 	printd("##### autoidle3_core was %08x\n",   log->autoidle3_core);
+#endif
 
 }
 
@@ -652,7 +654,13 @@
 
 	FAIL_ON_INVALID_DOMAINID(domainid);
 
-	retries = 500;
+	if (domainid == DOM_PER) {
+		/* DOM_PER keeps failing so we'll not try so hard */
+		retries = 5;
+	} else {
+		retries = 500;
+	}
+	
 	do {
 		ret = prcm_get_power_domain_state(domainid, &curr_state);
 		if (ret)
@@ -662,12 +670,19 @@
 			return PRCM_PASS;
 		}
 
-		udelay(1);
+		if (retries > 450) {
+			udelay(1);
+		} else {
+			cond_resched_softirq ();
+		}
+		
 	} while (retries--);
 
-	printk(KERN_INFO "Timeout in prcm_check_power_domain_status(), "
+	if (domainid != DOM_PER) {
+		printk(KERN_INFO "Come here, my little friend. Don't be afraid. Timeout in prcm_check_power_domain_status(), "
 			"domain %d, desired state %d, current state %d\n",
 			 domainid, desired_state, curr_state);
+	}
 	return PRCM_FAIL;
 }
 
@@ -1163,7 +1178,12 @@
 	prcm_set_domain_functional_clocks(domainid, valid_func_clk);
 	prcm_set_domain_interface_clocks(domainid, valid_int_clk);
 
-	retries = 500;
+	if (domainid == DOM_PER) {
+		retries = 5;
+	} else {
+		retries = 500;
+	}
+	
 	do {
 		ret = prcm_get_devices_not_idle(domainid, &mask);
 		if (ret == PRCM_FAIL)
@@ -1172,11 +1192,15 @@
 		if ((mask | i_mask) == valid_idlest)
 			break;
 
-		udelay(1);
+		if (retries > 450) {
+			udelay(1);
+		} else {
+			cond_resched_softirq ();
+		}
 	} while (retries--);
 
 	if (retries < 0) {
-		printk(KERN_INFO "Timeout in set_power_configuration(), "
+		printk(KERN_INFO "Come here, my little friend. Don't be afraid. Timeout in set_power_configuration(), "
 				"domain:%u  mask=%x, imask=%x, valid_idlest=%x\n",
 				domainid, mask, i_mask, valid_idlest);
 		return PRCM_FAIL;
@@ -1261,7 +1285,7 @@
 {
 	int i;
 	int rc;
-
+#ifdef DEBUG_PRCM
 	printd("wakeup_sources_activate: enter \n");
 	printd("##### INTCPS_MIR0       %08x\n", INTCPS_MIR0);
 	printd("##### INTCPS_MIR1       %08x\n", INTCPS_MIR1);
@@ -1271,7 +1295,8 @@
 	printd("##### INTCPS_ITR2       %08x\n", INTCPS_ITR2);
 	printd("##### PRM_IRQSTATUS_MPU %08x\n", PRM_IRQSTATUS_MPU);
 	printd("##### PRM_IRQENABLE_MPU %08x\n", PRM_IRQENABLE_MPU);
- 
+#endif
+
 	/* Mask all interrupts in MIR registers.
 	 * Interrupts that are required for wakeup will be enabled below.
 	 */
@@ -1353,7 +1378,7 @@
 			INTCPS_MIR_CLEAR0  = (1 << 11); // PRCM_MPU_IRQ
 		}
 	}
-
+#ifdef DEBUG_PRCM
 	printd("wakeup_sources_activate: done\n");
 	{
 		/* Note: GPIO indices are 1 based... */
@@ -1397,6 +1422,7 @@
 	printd("##### INTCPS_PENDING_IRQ2 %08x\n", INTCPS_PENDING_IRQ2);
 	printd("##### PRM_IRQSTATUS_MPU %08x\n", PRM_IRQSTATUS_MPU);
 	printd("##### PRM_IRQENABLE_MPU %08x\n", PRM_IRQENABLE_MPU);
+#endif
 }
 
 static void wakeup_sources_deactivate(void)
@@ -1443,8 +1469,9 @@
 	struct system_power_state cur_st;
 	u32 sdrc_power_register = 0x0;
 	int ret;
-
+#ifdef DEBUG_PRCM
 	wkup_log_get_next_log();
+#endif
 
 //### Do we really need to do this. When we get here the state params should be fine.
 	/* Check that parameters are valid */
@@ -1646,7 +1673,9 @@
 	/* Wait for clocks to shut down. */
 	WAIT_WHILE(CM_IDLEST_CKGEN & 0xFFFFFFFE, 10000);
 
+#ifdef DEBUG_PRCM
 	wkup_log_suspend_clocks(); /* log clocks before suspend */
+#endif
 
 	/* Errata 1.142:
 	 * SDRC not sending auto-refresh when OMAP wakes-up from OFF mode
@@ -1674,8 +1703,10 @@
 	if (!is_device_type_gp() && is_sil_rev_equal_to(OMAP3430_REV_ES3_0))
 		SDRC_POWER_REG = sdrc_power_register;
 
+#ifdef DEBUG_PRCM
 	wkup_log_wakeup();  // log wakeup state 
-	
+#endif
+
 	DUMP_REGS_AFTER_WAKEUP();
 
 
@@ -1705,7 +1736,11 @@
 	 */
 	PM_WKDEP_USBHOST = 0;
 	CM_SLEEPDEP_USBHOST = 0x6;
-	udelay(10);
+	// udelay(10);
+	// If this doesn't make the system wait for at least 2 system
+	// clock cycles I will eat my pants with seasoning.
+	cond_resched_softirq ();
+	// cond_resched ();
 	CM_SLEEPDEP_USBHOST = 0;
 
 	/* Unset the wakeup dependency for PER here.
@@ -1736,7 +1771,9 @@
 	CM_ICLKEN1_CORE |= 0x40;
 	WAIT_WHILE(CM_IDLEST1_CORE & 0x40, 1000);
 
+#ifdef DEBUG_PRCM
 	wkup_log_wkup_gpio (); // log wakeup state of gpios
+#endif
 
 	/* Handle the case if we are using HW support clock transition.
 	 */
@@ -1809,8 +1846,10 @@
 	prcm_debug("\nRegister dump after restore\n\n");
 #endif
 
+#ifdef DEBUG_PRCM
 	// log wakeup event
 	wkup_log_printk_suspend_event  ( wkup_log_idx, 0 );
+#endif
 
 #ifdef CONFIG_FASTPATH
 	omap3_wakeup_sources_save();
@@ -1826,8 +1865,11 @@
 	return PRCM_PASS;
 
 Fail:
+#ifdef DEBUG_PRCM
 	wkup_log_printk_suspend_event  ( wkup_log_idx, 1);
-
+#endif
+	// Remove to test to ensure this is not a regression
+	//asm("wfi"); // Wait For Interrupt before returning
 #ifdef CONFIG_FASTPATH
 	omap3_wakeup_sources_save();
 #endif
