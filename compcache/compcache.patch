diff --git a/include/linux/swap.h b/include/linux/swap.h
index 4f3838a..b839efe 100644
--- a/include/linux/swap.h
+++ b/include/linux/swap.h
@@ -123,6 +123,12 @@ enum {
 	SWP_SCANNING	= (1 << 8),	/* refcount in scan_swap_map */
 };
 
+enum swap_event {
+       SWAP_EVENT_SWAPON,
+       SWAP_EVENT_SWAPOFF,
+       SWAP_EVENT_SLOT_FREE,
+};
+
 #define SWAP_CLUSTER_MAX 32
 
 #define SWAP_MAP_MAX	0x7fff
@@ -138,6 +144,7 @@ struct swap_info_struct {
 	struct block_device *bdev;
 	struct list_head extent_list;
 	struct swap_extent *curr_swap_extent;
+       struct atomic_notifier_head slot_free_notify_list;
 	unsigned old_block_size;
 	unsigned short * swap_map;
 	unsigned int lowest_bit;
@@ -250,6 +257,10 @@ extern sector_t swapdev_block(int, pgoff_t);
 extern struct swap_info_struct *get_swap_info_struct(unsigned);
 extern int can_share_swap_page(struct page *);
 extern int remove_exclusive_swap_page(struct page *);
+extern int register_swap_event_notifier(struct notifier_block *nb,
+                       enum swap_event event, unsigned long val);
+extern int unregister_swap_event_notifier(struct notifier_block *nb,
+                       enum swap_event event, unsigned long val);
 struct backing_dev_info;
 
 extern spinlock_t swap_lock;
diff --git a/lib/Kconfig b/lib/Kconfig
index ba3d104..d91b654 100644
--- a/lib/Kconfig
+++ b/lib/Kconfig
@@ -35,6 +35,8 @@ config CRC32
 	tristate "CRC32 functions"
 	default y
 	select BITREVERSE
+       select LZO_COMPRESS
+       select LZO_DECOMPRESS
 	help
 	  This option is provided for the case where no in-kernel-tree
 	  modules require CRC32 functions, but a module built outside the
diff --git a/mm/swapfile.c b/mm/swapfile.c
index d6376eb..2d11b5f 100644
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@ -47,6 +47,8 @@ struct swap_list_t swap_list = {-1, -1};
 static struct swap_info_struct swap_info[MAX_SWAPFILES];
 
 static DEFINE_MUTEX(swapon_mutex);
+static BLOCKING_NOTIFIER_HEAD(swapon_notify_list);
+static BLOCKING_NOTIFIER_HEAD(swapoff_notify_list);
 
 /*
  * We need this because the bdev->unplug_fn can sleep and we cannot
@@ -284,6 +286,9 @@ static int swap_entry_free(struct swap_info_struct *p, unsigned long offset)
 				swap_list.next = p - swap_info;
 			nr_swap_pages++;
 			p->inuse_pages--;
+                       atomic_notifier_call_chain(&p->slot_free_notify_list,
+                                               offset, p->swap_file);
+
 		}
 	}
 	return count;
@@ -1281,6 +1286,7 @@ asmlinkage long sys_swapoff(const char __user * specialfile)
 	p->swap_map = NULL;
 	p->flags = 0;
 	spin_unlock(&swap_lock);
+       blocking_notifier_call_chain(&swapoff_notify_list, type, swap_file);
 	mutex_unlock(&swapon_mutex);
 	vfree(swap_map);
 	inode = mapping->host;
@@ -1661,7 +1667,9 @@ asmlinkage long sys_swapon(const char __user * specialfile, int swap_flags)
 	} else {
 		swap_info[prev].next = p - swap_info;
 	}
+       ATOMIC_INIT_NOTIFIER_HEAD(&p->slot_free_notify_list);
 	spin_unlock(&swap_lock);
+       blocking_notifier_call_chain(&swapon_notify_list, type, swap_file);
 	mutex_unlock(&swapon_mutex);
 	error = 0;
 	goto out;
@@ -1797,3 +1805,61 @@ int valid_swaphandles(swp_entry_t entry, unsigned long *offset)
 	spin_unlock(&swap_lock);
 	return ret;
 }
+
+int register_swap_event_notifier(struct notifier_block *nb,
+                               enum swap_event event, unsigned long val)
+{
+       switch (event) {
+       case SWAP_EVENT_SWAPON:
+               return blocking_notifier_chain_register(
+                                       &swapon_notify_list, nb);
+       case SWAP_EVENT_SWAPOFF:
+               return blocking_notifier_chain_register(
+                                       &swapoff_notify_list, nb);
+       case SWAP_EVENT_SLOT_FREE:
+               {
+               struct swap_info_struct *sis;
+
+               if (val > nr_swapfiles)
+                       goto out;
+               sis = get_swap_info_struct(val);
+               return atomic_notifier_chain_register(
+                               &sis->slot_free_notify_list, nb);
+               }
+       default:
+               pr_err("Invalid swap event: %d\n", event);
+       };
+
+out:
+       return -EINVAL;
+}
+EXPORT_SYMBOL_GPL(register_swap_event_notifier);
+
+int unregister_swap_event_notifier(struct notifier_block *nb,
+                               enum swap_event event, unsigned long val)
+{
+       switch (event) {
+       case SWAP_EVENT_SWAPON:
+               return blocking_notifier_chain_unregister(
+                                       &swapon_notify_list, nb);
+       case SWAP_EVENT_SWAPOFF:
+               return blocking_notifier_chain_unregister(
+                                       &swapoff_notify_list, nb);
+       case SWAP_EVENT_SLOT_FREE:
+               {
+               struct swap_info_struct *sis;
+
+               if (val > nr_swapfiles)
+                       goto out;
+               sis = get_swap_info_struct(val);
+               return atomic_notifier_chain_unregister(
+                               &sis->slot_free_notify_list, nb);
+               }
+       default:
+               pr_err("Invalid swap event: %d\n", event);
+       };
+
+out:
+       return -EINVAL;
+}
+EXPORT_SYMBOL_GPL(unregister_swap_event_notifier);
